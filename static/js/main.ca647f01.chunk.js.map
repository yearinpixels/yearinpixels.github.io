{"version":3,"sources":["utils/theme.js","utils/index.js","Components/CalendarDays.js","utils/io.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","typography","fontFamily","join","feelings","feelingsColors","Map","months","getFeeligns","map","feel","Pixel","state","handleHover","color","_this","setState","collection","index","has","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","get","Symbol","iterator","next","done","_ref","value","_ref2","Object","slicedToArray","key","err","return","_this2","this","_this$props","props","size","select","days","y","Math","floor","x","react_default","a","createElement","ReactKonva","width","height","fill","getColor","onMouseEnter","onMouseLeave","onClick","Component","CalendarDays","_this$props2","pixelSize","round","window","innerHeight","fontSpace","fontSize","style","zIndex","range","i","text","CalendarDays_Pixel","m","replacer","__proto__","prototype","_type","toConsumableArray","reviver","ImportFromFile","fileReader","handleFileRead","e","content","result","trigger","react","type","id","name","accept","opacity","overflow","position","onChange","file","target","files","FileReader","onloadend","readAsText","cursor","for","children","SaveToFile","element","document","Blob","getText","href","URL","createObjectURL","download","concat","Date","getFullYear","body","appendChild","click","Home","componentDidMount","states","day","selectDay","changeFeel","loadFromString","obj","JSON","parse","serializeStates","stringify","classes","_this$state","currentYear","index_es","container","direction","justify","alignItems","className","mainGrid","fillAll","item","xs","CalendarDays_CalendarDays","variant","gutterBottom","toUpperCase","Array","from","pair","control","checked","icon","CheckBoxOutlineBlank_default","nativeColor","checkedIcon","CheckBox_default","label","menuGrid","io_ImportFromFile","io_SaveToFile","withStyles","padding","autoPadding","App","styles","src_Home","Boolean","location","hostname","match","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca647f01.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core'\n\nconst theme = createMuiTheme({\n  typography: {\n    // Use the system font instead of the default Roboto font.\n    fontFamily: [\n      'AmaticaSC',\n      '-apple-system',\n      'Roboto',\n      '\"Segoe UI\"',\n      'Arial',\n      'sans-serif',\n    ].join(','),\n  },\n});\n\nexport { theme }","// ü, é, á, í, ó, ú\nimport { theme } from './theme'\n\nconst feelings = [\n  [\"Día en que me sentí completo (a)\", \"#f44436\"],\n  [\"Día perfecto / increible / el mejor\", \"#cddc39\"],\n  [\"Día feliz / comódo / bueno\", \"#ffc107\"],\n  [\"Día normal / relajado\", \"#c2185b\"],\n  [\"Día agotador / cansado / aburrido\", \"#0d47a1\"],\n  [\"Día depresivo / triste\", \"#607d8b\"],\n  [\"Día frustrante / todo salió mal\", \"#b388ff\"],\n  [\"Día de los peores en el año / muy malo\", \"#000000\"],\n]\n\nconst feelingsColors = new Map(feelings)\n\nconst months = [\n  'Enero', \n  'Febrero', \n  'Marzo', \n  'Abril', \n  'Mayo', \n  'Junio', \n  'Julio', \n  'Agosto', \n  'Septiembre', \n  'Octubre', \n  'Noviembre', \n  'Diciembre'\n]\n\nfunction getFeeligns(){\n  return new Map(feelings.map( feel => ([feel[0], false]) ))\n}\n\nexport { \n  feelings, \n  getFeeligns, \n  feelingsColors, \n  \n  months, \n  \n  theme \n}","import React, { Component } from 'react'\nimport {Layer, Rect, Stage, Text} from 'react-konva';\nimport { range } from 'lodash'\nimport { feelingsColors, months } from '../utils'\n\nclass Pixel extends Component {\n  state = {}\n\n  handleHover = (color) => {\n    this.setState({ color: color });\n  }\n\n  getColor(collection, index){\n    if(collection && collection.has(index)){\n      for(var [key, value] of collection.get(index)){\n        if(value){ \n          return feelingsColors.get(key)\n        }\n      }\n    }\n    return 'white'\n  }\n\n  render() {\n      const { index, size, select, days } = this.props\n      const y = size + size * Math.floor(index / 12)\n      const x = size + size * (index % 12)\n      const { color } = this.state\n      return (\n        <Rect\n          x={x} y={y} width={size} height={size}\n          fill={color == null? this.getColor(days, index): color}\n          onMouseEnter={() => this.handleHover('#e0e0e0')}\n          onMouseLeave={() => this.handleHover(null)}\n          onClick={() => select(index)}\n        />\n      );\n  }\n}\n\nexport default class CalendarDays extends Component {\n  \n  render() {\n    const { days, select } = this.props\n    const pixelSize = Math.round((window.innerHeight - 20) / 32)\n    const fontSpace = pixelSize * 0.3\n    const fontSize = pixelSize * 0.6\n    const foreground = \"#6e6e6e\"\n    return (\n      <Stage width={13 * pixelSize} height={32 * pixelSize} style={{zIndex: 3}}>\n        <Layer>\n          {range(32).map(i => (\n            <Text key={i}\n              fontFamily=\"AmaticaSC, Roboto\"\n              y={pixelSize * i + fontSpace} \n              fontSize={fontSize}\n              fill={foreground}\n              text={i}\n            />\n          ))}\n        </Layer>\n        <Layer>\n          {range(31*12).map(i => (\n            <Pixel key={i} \n              size={pixelSize} \n              index={i} \n              days={days} \n              select={select}\n            />\n          ))}\n        </Layer>\n        <Layer>\n          {months.map((m, i) => (\n            <Text key={i}\n              x={pixelSize * i + fontSpace + pixelSize}\n              fontFamily=\"AmaticaSC, Roboto\"\n              fontSize={fontSize} \n              fill={foreground} \n              text={m[0]}\n            />\n          ))}\n        </Layer>\n      </Stage>\n    )\n  }\n}","import React, { Fragment } from \"react\";\n\nfunction replacer (key, value){\n  if (value.__proto__ === Map.prototype) {\n      return {\n          _type: \"map\",\n          map: [...value],\n      }\n  } else return value;\n}\n\nfunction reviver (key, value){\n  if (value._type === \"map\") return new Map(value.map);\n  else return value;\n}\n\nfunction serialize(obj){\n  return JSON.stringify(obj, replacer)\n}\n\nfunction deserialize(obj){\n  return JSON.parse(obj, reviver)\n}\n\nconst ImportFromFile = (props) => {\n  let fileReader;\n  \n  const handleFileRead = (e) => {\n    const content = fileReader.result\n    props.trigger(content)\n  }\n\n  const handleFileChosen = (file) => {\n    fileReader = new FileReader()\n    fileReader.onloadend = handleFileRead\n    fileReader.readAsText(file)\n  }\n\n  return (\n    <Fragment>\n      <input \n        type=\"file\"\n        id=\"file\"\n        name=\"file\"\n        accept='.yip'\n        style={{\n          width: '0.1px',\n          height: '0.1px',\n          opacity: 0,\n          overflow: 'hidden',\n          position: 'absolute',\n          zIndex: -1,\n        }}\n        onChange={e => handleFileChosen(e.target.files[0])}\n      />\n      <label style={{cursor: 'pointer'}} for=\"file\">{props.children}</label>\n    </Fragment>\n  )\n}\n\nconst SaveToFile = (props) => {\n  const downloadFile = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([props.getText()], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = `Mi Año ${new Date().getFullYear()}.yip`;\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  return (\n    <div onClick={downloadFile} style={{cursor:'pointer'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport { SaveToFile, ImportFromFile, serialize, deserialize }","import React, { Component, Fragment } from 'react';\nimport './App.css';\n\nimport { Grid, withStyles, Checkbox, FormControlLabel, Typography } from '@material-ui/core'\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank'\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\nimport CalendarDays from './Components/CalendarDays'\n\nimport { getFeeligns, months, feelingsColors } from './utils'\nimport { ImportFromFile, SaveToFile, serialize, deserialize } from './utils/io';\n\nconst styles = {\n  fillAll: {\n    height: '100%', \n    width: '100%',\n  },\n  mainGrid: {\n    position: 'absolute', \n  },\n  menuGrid:{\n    padding: 20,\n    zIndex: 2\n  },\n  autoPadding: {\n    padding: 'auto',\n  }\n}\n\nclass Home extends Component {\n  state = {}\n\n  componentDidMount = () => {\n    const states = new Map([[0, getFeeligns()]])\n    this.setState({day: 0, states: states})\n  }\n\n  selectDay = (day) => {\n    this.setState({day: day})\n    if(!this.state.states.has(day)){\n      this.setState(state=>({\n        states: new Map([...state.states, [day, getFeeligns()]])\n      }))\n    }\n  }\n\n  changeFeel = (feel) => {\n    this.setState(state => ({\n      states: new Map([\n        ...state.states, [\n        state.day, new Map([\n          ...state.states.get(state.day), \n          [feel, !state.states.get(state.day).get(feel)]\n        ])\n      ]])\n    }))\n  }\n\n  loadFromString = (text) => {\n    this.setState({states: deserialize(text)})\n  }\n\n  serializeStates = () => {\n    return serialize(this.state.states)\n  }\n\n  render() {\n    const { classes } = this.props\n    const {day, states} = this.state\n    const currentYear = new Date().getFullYear()\n    return (\n    <Fragment>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"flex-start\"\n        className={[classes.mainGrid, classes.fillAll].join(' ')}\n        >\n          <Grid item xs={6} className={classes.fillAll}>\n            <Grid \n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n              className={classes.fillAll}\n            >\n              <CalendarDays days={this.state.states} select={this.selectDay}/>\n            </Grid>    \n          </Grid>    \n          <Grid item xs={6} className={classes.fillAll}>\n            <Grid \n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n              className={classes.fillAll}\n            >\n              <Typography variant=\"display3\" gutterBottom>\n                {`Año ${currentYear} en Píxeles`.toUpperCase()}  \n              </Typography>\n              \n              <Typography variant=\"display1\" gutterBottom>\n                {`${Math.floor(day/12)+1} de ${months[day % 12]} del ${currentYear}`.toUpperCase()}\n              </Typography>\n\n              <Grid\n                container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"flex-start\"\n                style={{width:'auto'}}\n              >\n              {states && states.has(day) && Array.from(states.get(day)).map(pair => (\n                <FormControlLabel\n                  key={pair[0]}\n                  control={\n                    <Checkbox\n                      checked={pair[1]}\n                      onChange={() => this.changeFeel(pair[0])}\n                      value={pair[0]}\n                      icon={\n                        <CheckBoxOutlineBlankIcon nativeColor={feelingsColors.get(pair[0])}/>\n                      }\n                      checkedIcon={\n                        <CheckBoxIcon nativeColor={feelingsColors.get(pair[0])}/>\n                      }\n                    />\n                  }\n                  label={\n                    <Typography variant=\"headline\">{pair[0]}</Typography>\n                  }\n                />\n              ))}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"flex-start\"\n          className={[classes.mainGrid, classes.menuGrid].join(' ')}\n        >\n          <ImportFromFile trigger={this.loadFromString}>\n            <Typography variant=\"title\">\n              Cargar\n            </Typography>\n          </ImportFromFile>\n          <br/>\n          <SaveToFile getText={this.serializeStates}>\n            <Typography variant=\"title\">\n              Salvar\n            </Typography>\n          </SaveToFile>\n        </Grid>\n      </Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(Home);\n","import React, { Component, Fragment } from 'react'\nimport Home from './Home';\nimport { MuiThemeProvider, CssBaseline } from '@material-ui/core';\nimport { theme } from './utils';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <CssBaseline/>\n        <MuiThemeProvider theme={theme}>\n          <Home/>\n        </MuiThemeProvider>\n      </Fragment>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}